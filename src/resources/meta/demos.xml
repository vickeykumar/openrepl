<?xml version="1.0" encoding="UTF-8"?>
<!-- Evironment variables to be used in shell script:
		TERM=xterm
		GOPATH=/opt/gotty/
		HOME="+cmd.Dir
		HOSTNAME
		GCC_EXEC_PREFIX=/usr/lib/gcc/
		IdeLang	
		CompilerOption
		IdeFileName
		arg0 is idecontent if IdeFileName is not set, use the content to save to desire file name and run,
		else arg0 is the filename that is already saved, u need to compile and run it as per $IdeLang and $CompilerOption
		arg1/restargs are args to compiler/repl
 -->
<DemoList>
	<Demo>
		<Name>cling</Name>
		<Github>https://github.com/root-project/cling</Github>
		<Doc>./docs/cling.html</Doc>
		<Codes>
			<Name>help</Name>
			<Code>
				<Prompt>[cling]$</Prompt>
				<Statement> .help</Statement>
				<Result>
Cling (C/C++ interpreter) meta commands usage
All commands must be preceded by a '.', except
for the evaluation statement { }
==============================================================================
Syntax: .Command [arg0 arg1 ... argN]

.L &lt;filename&gt; - Load the given file or library

.(x|X) &lt;filename&gt;[args] - Same as .L and runs a function with
signature: ret_type filename(args)</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>[cling]$</Prompt>
				<Statement> #include &lt;stdio.h&gt;</Statement>
			</Code>
			<Code>
				<Prompt>[cling]$</Prompt>
				<Statement> int i=0;</Statement>
			</Code>
			<Code>
				<Prompt>[cling]$</Prompt>
				<Statement> i++</Statement>
			</Code>
			<Code>
				<Prompt>[cling]$</Prompt>
				<Statement> printf("%d\n",i);</Statement>
				<Result>1</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>[cling]$</Prompt>
				<Statement> 1+2</Statement>
				<Result>(int) 3 &lt;-- runtime values supported only with c++ mode</Result>
			</Code>
			<Code>
				<Prompt>[cling]$</Prompt>
				<Statement> 2*3</Statement>
				<Result>(int) 6</Result>
			</Code>
			<Code>
				<Prompt>[cling]$</Prompt>
				<Statement> int i=10</Statement>
				<Result>(int) 10</Result>
			</Code>
			<Code>
				<Prompt>[cling]$</Prompt>
				<Statement> i</Statement>
				<Result>(int) 10</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>[cling]$</Prompt>
				<Statement> #include&lt;stdio.h&gt;</Statement>
			</Code>
			<Code>
				<Prompt>[cling]$</Prompt>
				<Statement> printf("Hello World\n");</Statement>
				<Result>Hello World</Result>
			</Code>
			<Code>
				<Prompt>[cling]$</Prompt>
				<Statement> printf("Hello World\n")</Statement>
				<Result>Hello World
(int) 12</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>[cling]$</Prompt>
				<Statement> #include&lt;iostream&gt;</Statement>
			</Code>
			<Code>
				<Prompt>[cling]$</Prompt>
				<Statement> using namespace std;</Statement>
			</Code>
			<Code>
				<Prompt>[cling]$</Prompt>
				<Statement> cout&lt;&lt;"Hello World\n";</Statement>
				<Result>Hello World</Result>
			</Code>
		</Codes>
		<Usage>
			<Command>.help</Command>
			<Description>Display brief descriptions of all meta-commands.</Description>
		</Usage>
		<Usage>
			<Command>.L libname</Command>
			<Description>Load the given file or library.</Description>
		</Usage>
		<Usage>
			<Command>.rawInput</Command>
			<Description>Toggle on/off raw input.</Description>
		</Usage>
		<Usage>
			<Command>.q</Command>
			<Description>Exits Cling Interpreter.</Description>
		</Usage>
		<Usage>
                        <Command>Note:</Command>
                        <Description>runtime extraction of value is not supported in c-mode.</Description>
                </Usage>
		<Content>/* Welcome to OpenREPL! */

#include &lt;stdio.h&gt;

int main()
{
    printf("Hello, World!\n");
    return 0;
}
		</Content>
		<Compiler>
COMPILER=gcc
FILE=test.c
DEBUG_OPTION=""
debug=false
WORKDIR=$HOME
if [ "$CompilerOption" = "debug" ]; then
	debug=true;
	if [ $(uname) == "Linux" ]; then
		DEBUG_OPTION="-ggdb -fdebug-prefix-map=$(pwd)=. -g -static -static-libgcc";
	else
		DEBUG_OPTION="-ggdb -fdebug-prefix-map=$(pwd)=. -g";
	fi
fi

if [ "$IdeLang" = "cpp" ]; then
	COMPILER=g++;
	FILE=test.cpp;
	if $debug; then
		if [ $(uname) == "Linux" ]; then
			DEBUG_OPTION="-ggdb -fdebug-prefix-map=$(pwd)=. -g -static -static-libstdc++";
		else
			DEBUG_OPTION="-ggdb -fdebug-prefix-map=$(pwd)=. -g";
		fi
	fi
fi

printf "\n";

if [ "$IdeFileName" != "" ]; then
	WORKDIR=$(dirname "$IdeFileName");
	FILE=$(basename "$IdeFileName");
else
	echo $0|base64 --decode > "$WORKDIR/$FILE";
fi

#echo "restargs: "$@

if [ $? -eq 0 ] &amp;&amp; [ -f "$WORKDIR/$FILE" ]; then
    $COMPILER "$WORKDIR/$FILE" -pthread -lm -o "$WORKDIR/$FILE".o $DEBUG_OPTION $@;
fi
if [ $? -eq 0 ] &amp;&amp; [ -f "$WORKDIR/$FILE.o" ]; then
	if $debug; then
		gdb "$WORKDIR/$FILE".o $@;
	else
		#second quoate with escape, as -c option takes a string argument.
    	$SHELL -c "\"$WORKDIR/$FILE\".o $@";
    fi
fi
printf "\n";
sleep 0.05
		</Compiler>
	</Demo>
	
	<Demo>
		<Name>yaegi</Name>
		<Github>https://github.com/traefik/yaegi</Github>
		<Doc>https://pkg.go.dev/github.com/traefik/yaegi</Doc>
		<Codes>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> 12312321</Statement>
				<Result>: 12312321</Result>
			</Code>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> 12+31</Statement>
				<Result>: 43</Result>
			</Code>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> var i int</Statement>
				<Result>: 0xc000204490</Result>
			</Code>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> i</Statement>
				<Result>: 0</Result>
			</Code>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> for i:=0; i&lt;10; i++ {
fmt.Println("Hi: ",i)
}</Statement>
				<Result>Hi: 0
Hi: 1
Hi: 2
Hi: 3
Hi: 4
Hi: 5
Hi: 6
Hi: 7
Hi: 8
Hi: 9
: &lt;nil&gt;</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> import "time"</Statement>
				<Result>: 0xc000486a40</Result>
			</Code>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> time.Now();</Statement>
				<Result>: 2018-07-18 22:32:56.18823511 +0530 IST m=+0.000279327</Result>
			</Code>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> time.Now().Unix();</Statement>
				<Result>: 1531933384</Result>
			</Code>
		</Codes>
		<Usage>
			<Command>:help</Command>
			<Description>please refer docs for more info.</Description>
		</Usage>
		<Content>/* Welcome to OpenREPL! */

package main

import "fmt"

func main() {
    fmt.Println("Hello, World!")
}
		</Content>
		<Compiler>
COMPILER=yaegi
FILE=test.go
GOROOT=`go env GOROOT`
debug=false
WORKDIR=$HOME
if [ "$CompilerOption" = "debug" ]; then
	debug=true;
fi
if [ "$IdeLang" = "go" ]; then
	COMPILER=yaegi
fi
printf "\n";

if [ "$IdeFileName" != "" ]; then
	WORKDIR=$(dirname "$IdeFileName");
	FILE=$(basename "$IdeFileName");
else
	echo $0|base64 --decode > "$WORKDIR/$FILE";
fi

cd $WORKDIR;
if [ $? -eq 0 ] &amp;&amp; [ -f "$WORKDIR/$FILE" ]; then
	if $debug; then
		go build -gcflags=all="-N -l" -o "$FILE".o "$FILE" $@;
		echo "add-auto-load-safe-path $GOROOT/src/runtime/runtime-gdb.py" > $HOME/.gdbinit
		gdb "$FILE".o -d $GOROOT $@;
	else
    	$COMPILER run "$WORKDIR/$FILE" $@;
    fi
fi
printf "\n";
sleep 0.05
		</Compiler>
	</Demo>

	<Demo>
		<Name>gointerpreter</Name>
		<Github>https://github.com/vickeykumar/Go-interpreter</Github>
		<Doc>./docs/gointerpreter.html</Doc>
		<Codes>
			<Code>
				<Prompt>go&gt;&gt;</Prompt>
				<Statement> 12312321</Statement>
				<Result>12312321</Result>
			</Code>
			<Code>
				<Prompt>go&gt;&gt;</Prompt>
				<Statement> 12+31</Statement>
				<Result>43</Result>
			</Code>
			<Code>
				<Prompt>go&gt;&gt;</Prompt>
				<Statement> var i int</Statement>
			</Code>
			<Code>
				<Prompt>go&gt;&gt;</Prompt>
				<Statement> i</Statement>
				<Result>0</Result>
			</Code>
			<Code>
				<Prompt>go&gt;&gt;</Prompt>
				<Statement> for i:=0; i&lt;10; i++ {
fmt.Println("Hi: ",i)
}</Statement>
			</Code>
			<Code>
				<Prompt>go&gt;&gt;</Prompt>
				<Statement> :r</Statement>
				<Result>Hi: 0
Hi: 1
Hi: 2
Hi: 3
Hi: 4
Hi: 5
Hi: 6
Hi: 7
Hi: 8
Hi: 9</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>go&gt;&gt;</Prompt>
				<Statement> import "time"</Statement>
			</Code>
			<Code>
				<Prompt>go&gt;&gt;</Prompt>
				<Statement> time.Now();</Statement>
				<Result>2018-07-18 22:32:56.18823511 +0530 IST m=+0.000279327</Result>
			</Code>
			<Code>
				<Prompt>go&gt;&gt;</Prompt>
				<Statement> time.Now().Unix();</Statement>
				<Result>1531933384</Result>
			</Code>
		</Codes>
		<Usage>
			<Command>:help</Command>
			<Description>display brief descriptions of all meta-commands.</Description>
		</Usage>
		<Usage>
			<Command>:r, :x</Command>
			<Description>Run as Go File.</Description>
		</Usage>
		<Usage>
			<Command>:c</Command>
			<Description>Clear the session,and Restart.</Description>
		</Usage>
		<Usage>
			<Command>:q</Command>
			<Description>Exits the REPL.</Description>
		</Usage>
		<Content>/* Welcome to OpenREPL! */

package main

import "fmt"

func main() {
    fmt.Println("Hello, World!")
}
		</Content>
		<Compiler>
COMPILER=go
FILE=test.go
GOROOT=`go env GOROOT`
debug=false
WORKDIR=$HOME
if [ "$CompilerOption" = "debug" ]; then
	debug=true;
fi
if [ "$IdeLang" = "go" ]; then
	COMPILER=go
fi
printf "\n";

if [ "$IdeFileName" != "" ]; then
	WORKDIR=$(dirname "$IdeFileName");
	FILE=$(basename "$IdeFileName");
else
	echo $0|base64 --decode > "$WORKDIR/$FILE";
fi

cd $WORKDIR;
if [ $? -eq 0 ] &amp;&amp; [ -f "$WORKDIR/$FILE" ]; then
	if $debug; then
		go build -gcflags=all="-N -l" -o "$FILE".o $FILE $@;
		echo "add-auto-load-safe-path $GOROOT/src/runtime/runtime-gdb.py" > $HOME/.gdbinit
		gdb "$FILE".o -d "$GOROOT" $@;
	else
    	$COMPILER run $FILE $@;
    fi
fi
printf "\n";
sleep 0.05
		</Compiler>
	</Demo>



	<Demo>
		<Name>jq-repl</Name>
		<Github>https://github.com/vickeykumar/jq-repl</Github>
		<Doc>https://stedolan.github.io/jq/manual</Doc>
		<Codes>
			<Code>
				<Prompt>jq&gt;&gt;</Prompt>
				<Statement> .[0] | keys</Statement>
				<Result>[
  "AppArmorProfile",
  "Args",
  "Config",
  "Created",
  "Driver",
  "ExecIDs",
  "GraphDriver",
  "HostConfig",
  "HostnamePath",
  "HostsPath",
  "Id",
  "Image",
  "LogPath",
  "MountLabel",
  "Mounts",
  "Name",
  "NetworkSettings",
  "Path",
  "Platform",
  "ProcessLabel",
  "ResolvConfPath",
  "RestartCount",
  "State"
]</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>jq&gt;&gt;</Prompt>
				<Statement> .[0].Id</Statement>
				<Result>"4c855660afe7ba17ea1f70ac0557d7a2ff392bb9d70cd880ace19cca56b484d0"</Result>
			</Code>
			<Code>
				<Prompt>jq&gt;&gt;</Prompt>
				<Statement> -c .[0].State</Statement>
				<Result>{"Status":"running","Running":true,"Paused":false,"Restarting":false,"OOMKilled":false,"Dead":false,"Pid":43101,"ExitCode":0,"Error":"","StartedAt":"2023-02-10T16:56:10.931973195Z","FinishedAt":"0001-01-01T00:00:00Z"}</Result>
			</Code>
			<Code>
				<Prompt>jq&gt;&gt;</Prompt>
				<Statement> .[0].State</Statement>
				<Result>{
  "Status": "running",
  "Running": true,
  "Paused": false,
  "Restarting": false,
  "OOMKilled": false,
  "Dead": false,
  "Pid": 43101,
  "ExitCode": 0,
  "Error": "",
  "StartedAt": "2023-02-10T16:56:10.931973195Z",
  "FinishedAt": "0001-01-01T00:00:00Z"
}</Result>
			</Code>
		</Codes>
		<Codes>
                        <Code>
                                <Prompt>jq&gt;&gt;</Prompt>
                                <Statement> .[0].State.Status</Statement>
                                <Result>"running"</Result>
                        </Code>
                        <Code>
                                <Prompt>jq&gt;&gt;</Prompt>
                                <Statement> .[0].State.StartedAt</Statement>
                                <Result>"2023-02-10T16:56:10.931973195Z"</Result>
                        </Code>
                        <Code>
                                <Prompt>jq&gt;&gt;</Prompt>
                                <Statement> .[0].State.Pid</Statement>
                                <Result>43101</Result>
                        </Code>
                </Codes>
		<Usage>
			<Command>:h, :help</Command>
			<Description>Print Help Menu( refer documentaion below or visit https://stedolan.github.io/jq/manual/ for more info on commands)</Description>
		</Usage>
		<Usage>
			<Command>&lt;JSON Block&gt;</Command>
			<Description>loads the current json block for processing</Description>
		</Usage>
		<Usage>
			<Command>keys</Command>
			<Description>display the keys from current json.</Description>
		</Usage>
		<Usage>
                        <Command>.</Command>
                        <Description>display current json.</Description>
                </Usage>
		<Usage>
                        <Command>.key1</Command>
                        <Description>display the key1 data from current json.</Description>
		</Usage>
		<Usage>
                        <Command>[jq options] &lt;jq filter&gt; </Command>
                        <Description>works similar to jq command-line tool, but works on current loaded json </Description>
		</Usage>
		<Usage>
                        <Command>jq [jq options] &lt;jq filter&gt; </Command>
                        <Description>fire jq command-line from jq-repl shell</Description>
                </Usage>
		<Usage>
			<Command>:q</Command>
			<Description>Exits the REPL.</Description>
		</Usage>
		<Content>
[
    {
        "Id": "4c855660afe7ba17ea1f70ac0557d7a2ff392bb9d70cd880ace19cca56b484d0",
        "Created": "2023-02-10T16:56:08.224192929Z",
        "Path": "/bin/bash",
        "Args": [],
        "State": {
            "Status": "running",
            "Running": true,
            "Paused": false,
            "Restarting": false,
            "OOMKilled": false,
            "Dead": false,
            "Pid": 43101,
            "ExitCode": 0,
            "Error": "",
            "StartedAt": "2023-02-10T16:56:10.931973195Z",
            "FinishedAt": "0001-01-01T00:00:00Z"
        },
        "Image": "sha256:750ed78dabd45cedbaf5c087d1048db165cb0571b802e7cb81cd3995489715e8",
        "ResolvConfPath": "/var/lib/docker/containers/4c855660afe7ba17ea1f70ac0557d7a2ff392bb9d70cd880ace19cca56b484d0/resolv.conf",
        "HostnamePath": "/var/lib/docker/containers/4c855660afe7ba17ea1f70ac0557d7a2ff392bb9d70cd880ace19cca56b484d0/hostname",
        "HostsPath": "/var/lib/docker/containers/4c855660afe7ba17ea1f70ac0557d7a2ff392bb9d70cd880ace19cca56b484d0/hosts",
        "LogPath": "/var/lib/docker/containers/4c855660afe7ba17ea1f70ac0557d7a2ff392bb9d70cd880ace19cca56b484d0/4c855660afe7ba17ea1f70ac0557d7a2ff392bb9d70cd880ace19cca56b484d0-json.log",
        "Name": "/fervent_dubinsky",
        "RestartCount": 0,
        "Driver": "overlay2",
        "Platform": "linux",
        "MountLabel": "",
        "ProcessLabel": "",
        "AppArmorProfile": "",
        "ExecIDs": null,
        "HostConfig": {
            "Binds": null,
            "ContainerIDFile": "",
            "LogConfig": {
                "Type": "json-file",
                "Config": {}
            },
            "NetworkMode": "default",
            "PortBindings": {},
            "RestartPolicy": {
                "Name": "no",
                "MaximumRetryCount": 0
            },
            "AutoRemove": false,
            "VolumeDriver": "",
            "VolumesFrom": null,
            "CapAdd": null,
            "CapDrop": null,
            "CgroupnsMode": "private",
            "Dns": [],
            "DnsOptions": [],
            "DnsSearch": [],
            "ExtraHosts": null,
            "GroupAdd": null,
            "IpcMode": "private",
            "Cgroup": "",
            "Links": null,
            "OomScoreAdj": 0,
            "PidMode": "",
            "Privileged": false,
            "PublishAllPorts": false,
            "ReadonlyRootfs": false,
            "SecurityOpt": null,
            "UTSMode": "",
            "UsernsMode": "",
            "ShmSize": 67108864,
            "Runtime": "runc",
            "ConsoleSize": [
                0,
                0
            ],
            "Isolation": "",
            "CpuShares": 0,
            "Memory": 0,
            "NanoCpus": 0,
            "CgroupParent": "",
            "BlkioWeight": 0,
            "BlkioWeightDevice": [],
            "BlkioDeviceReadBps": null,
            "BlkioDeviceWriteBps": null,
            "BlkioDeviceReadIOps": null,
            "BlkioDeviceWriteIOps": null,
            "CpuPeriod": 0,
            "CpuQuota": 0,
            "CpuRealtimePeriod": 0,
            "CpuRealtimeRuntime": 0,
            "CpusetCpus": "",
            "CpusetMems": "",
            "Devices": [],
            "DeviceCgroupRules": null,
            "DeviceRequests": null,
            "KernelMemory": 0,
            "KernelMemoryTCP": 0,
            "MemoryReservation": 0,
            "MemorySwap": 0,
            "MemorySwappiness": null,
            "OomKillDisable": null,
            "PidsLimit": null,
            "Ulimits": null,
            "CpuCount": 0,
            "CpuPercent": 0,
            "IOMaximumIOps": 0,
            "IOMaximumBandwidth": 0,
            "MaskedPaths": [
                "/proc/asound",
                "/proc/acpi",
                "/proc/kcore",
                "/proc/keys",
                "/proc/latency_stats",
                "/proc/timer_list",
                "/proc/timer_stats",
                "/proc/sched_debug",
                "/proc/scsi",
                "/sys/firmware"
            ],
            "ReadonlyPaths": [
                "/proc/bus",
                "/proc/fs",
                "/proc/irq",
                "/proc/sys",
                "/proc/sysrq-trigger"
            ]
        },
        "GraphDriver": {
            "Data": {
                "LowerDir": "/var/lib/docker/overlay2/f3e1e82c2874e530a6dca421163eb5671ec440a87c5623eeb6c0280163ab74fc-init/diff:/var/lib/docker/overlay2/2ce1e4f49992ede9551d6ff2810b713e9af373e93ee02059e780415e5e9acef7/diff:/var/lib/docker/overlay2/b1699b3f7672cc3883a8e87f229b4c5df0aac05170e1722292c1f687c7736502/diff:/var/lib/docker/overlay2/58fa3f3f612b066f46f9b976c315a9c190801a7d00a6da3eca86b1d57216c962/diff:/var/lib/docker/overlay2/07d853ca07d375b5879715b84016954d5468cd411b009f52c3b160db07279be9/diff",
                "MergedDir": "/var/lib/docker/overlay2/f3e1e82c2874e530a6dca421163eb5671ec440a87c5623eeb6c0280163ab74fc/merged",
                "UpperDir": "/var/lib/docker/overlay2/f3e1e82c2874e530a6dca421163eb5671ec440a87c5623eeb6c0280163ab74fc/diff",
                "WorkDir": "/var/lib/docker/overlay2/f3e1e82c2874e530a6dca421163eb5671ec440a87c5623eeb6c0280163ab74fc/work"
            },
            "Name": "overlay2"
        },
        "Mounts": [],
        "Config": {
            "Hostname": "4c855660afe7",
            "Domainname": "",
            "User": "",
            "AttachStdin": true,
            "AttachStdout": true,
            "AttachStderr": true,
            "Tty": true,
            "OpenStdin": true,
            "StdinOnce": true,
            "Env": [
                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
            ],
            "Cmd": [
                "/bin/bash"
            ],
            "Image": "ubuntu_cling_18.04",
            "Volumes": null,
            "WorkingDir": "",
            "Entrypoint": null,
            "OnBuild": null,
            "Labels": {}
        },
        "NetworkSettings": {
            "Bridge": "",
            "SandboxID": "6c52b4f629fef31e5c28f356d5ec44cec9e9528cdc510b3b70179786087f3613",
            "HairpinMode": false,
            "LinkLocalIPv6Address": "",
            "LinkLocalIPv6PrefixLen": 0,
            "Ports": {},
            "SandboxKey": "/var/run/docker/netns/6c52b4f629fe",
            "SecondaryIPAddresses": null,
            "SecondaryIPv6Addresses": null,
            "EndpointID": "6470c3bc5841f4b4c0c190ba0905f14ec06cfbc1e15fea2b05ac93d9f804adb2",
            "Gateway": "172.17.0.1",
            "GlobalIPv6Address": "",
            "GlobalIPv6PrefixLen": 0,
            "IPAddress": "172.17.0.3",
            "IPPrefixLen": 16,
            "IPv6Gateway": "",
            "MacAddress": "02:42:ac:11:00:03",
            "Networks": {
                "bridge": {
                    "IPAMConfig": null,
                    "Links": null,
                    "Aliases": null,
                    "NetworkID": "1913d9a0e2494726353ea8985c6412d9fe3f5fbf2a079b5a5b69b53c15fe3faa",
                    "EndpointID": "6470c3bc5841f4b4c0c190ba0905f14ec06cfbc1e15fea2b05ac93d9f804adb2",
                    "Gateway": "172.17.0.1",
                    "IPAddress": "172.17.0.3",
                    "IPPrefixLen": 16,
                    "IPv6Gateway": "",
                    "GlobalIPv6Address": "",
                    "GlobalIPv6PrefixLen": 0,
                    "MacAddress": "02:42:ac:11:00:03",
                    "DriverOpts": null
                }
            }
        }
    }
]

		</Content>
		<Compiler>
if [ "$IdeFileName" != "" ]; then
	cat "$IdeFileName"|jq-repl $@;
else
	echo $0|base64 --decode|jq-repl $@;
fi
printf "\n";
sleep 0.05
		</Compiler>
	</Demo>

	<Demo>
		<Name>python</Name>
		<Doc>./docs/python.html</Doc>
		<Codes>
			<Code>
				<Prompt>&gt;&gt;&gt;</Prompt>
				<Statement> 12312321</Statement>
				<Result>12312321</Result>
			</Code>
			<Code>
				<Prompt>&gt;&gt;&gt;</Prompt>
				<Statement> 12+31</Statement>
				<Result>43</Result>
			</Code>
			<Code>
				<Prompt>&gt;&gt;&gt;</Prompt>
				<Statement> i=0</Statement>
			</Code>
			<Code>
				<Prompt>&gt;&gt;&gt;</Prompt>
				<Statement> i</Statement>
				<Result>0</Result>
			</Code>
			<Code>
				<Prompt>&gt;&gt;&gt;</Prompt>
				<Statement> for i in range(10):
...        print "Hi: ",i</Statement>
			<Result>Hi: 0
Hi: 1
Hi: 2
Hi: 3
Hi: 4
Hi: 5
Hi: 6
Hi: 7
Hi: 8
Hi: 9</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>&gt;&gt;&gt;</Prompt>
				<Statement> import time</Statement>
			</Code>
			<Code>
				<Prompt>&gt;&gt;&gt;</Prompt>
				<Statement> time.time()</Statement>
				<Result>1531933100.30023</Result>
			</Code>
		</Codes>
		<Usage>
			<Command>help(object)</Command>
			<Description>display help about the given object.</Description>
		</Usage>
		<Usage>
			<Command>exit() or ctrl-D</Command>
			<Description>Exits the REPL.</Description>
		</Usage>
		<Content># Welcome to OpenREPL!

print("Hello, World!")
		</Content>
		<Compiler>
COMPILER=python
FILE=test.py
debug=false
WORKDIR=$HOME
if [ "$CompilerOption" = "debug" ]; then
	debug=true;
	COMPILER="python -m pdb";
fi
printf "\n";
if [ "$IdeFileName" != "" ]; then
	WORKDIR=$(dirname "$IdeFileName");
	FILE=$(basename "$IdeFileName");
else
	echo $0|base64 --decode > "$WORKDIR/$FILE";
fi
if [ $? -eq 0 ] &amp;&amp; [ -f "$WORKDIR/$FILE" ]; then
    $COMPILER "$WORKDIR/$FILE" $@;
fi
printf "\n";
sleep 0.05
		</Compiler>
	</Demo>

	<Demo>
		<Name>python2.7</Name>
		<Doc>./docs/python.html</Doc>
		<Codes>
			<Code>
				<Prompt>&gt;&gt;&gt;</Prompt>
				<Statement> 12312321</Statement>
				<Result>12312321</Result>
			</Code>
			<Code>
				<Prompt>&gt;&gt;&gt;</Prompt>
				<Statement> 12+31</Statement>
				<Result>43</Result>
			</Code>
			<Code>
				<Prompt>&gt;&gt;&gt;</Prompt>
				<Statement> i=0</Statement>
			</Code>
			<Code>
				<Prompt>&gt;&gt;&gt;</Prompt>
				<Statement> i</Statement>
				<Result>0</Result>
			</Code>
			<Code>
				<Prompt>&gt;&gt;&gt;</Prompt>
				<Statement> for i in range(10):
...        print "Hi: ",i</Statement>
			<Result>Hi: 0
Hi: 1
Hi: 2
Hi: 3
Hi: 4
Hi: 5
Hi: 6
Hi: 7
Hi: 8
Hi: 9</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>&gt;&gt;&gt;</Prompt>
				<Statement> import time</Statement>
			</Code>
			<Code>
				<Prompt>&gt;&gt;&gt;</Prompt>
				<Statement> time.time()</Statement>
				<Result>1531933100.30023</Result>
			</Code>
		</Codes>
		<Usage>
			<Command>help(object)</Command>
			<Description>display help about the given object.</Description>
		</Usage>
		<Usage>
			<Command>exit() or ctrl-D</Command>
			<Description>Exits the REPL.</Description>
		</Usage>
		<Content># Welcome to OpenREPL!

print("Hello, World!")
		</Content>
		<Compiler>
COMPILER=python2.7
FILE=test.py
debug=false
WORKDIR=$HOME
if [ "$CompilerOption" = "debug" ]; then
	debug=true;
	COMPILER="python2.7 -m pdb";
fi
printf "\n";
if [ "$IdeFileName" != "" ]; then
	WORKDIR=$(dirname "$IdeFileName");
	FILE=$(basename "$IdeFileName");
else
	echo $0|base64 --decode > "$WORKDIR/$FILE";
fi
if [ $? -eq 0 ] &amp;&amp; [ -f "$WORKDIR/$FILE" ]; then
    $COMPILER "$WORKDIR/$FILE" $@;
fi
printf "\n";
sleep 0.05
		</Compiler>
	</Demo>

	<Demo>
		<Name>ipython</Name>
		<Doc>./docs/python.html</Doc>
		<Codes>
			<Code>
				<Prompt>In [1]</Prompt>
				<Statement> 12312321</Statement>
				<Result>Out[1]: 12312321</Result>
			</Code>
			<Code>
				<Prompt>In [2]</Prompt>
				<Statement> 12+31</Statement>
				<Result>Out[2]: 43</Result>
			</Code>
			<Code>
				<Prompt>In [3]</Prompt>
				<Statement> i=0</Statement>
			</Code>
			<Code>
				<Prompt>In [4]</Prompt>
				<Statement> i</Statement>
				<Result>Out[4]: 0</Result>
			</Code>
			<Code>
				<Prompt>In [5]</Prompt>
				<Statement> for i in range(10):
...        print "Hi: ",i</Statement>
			<Result>Hi: 0
Hi: 1
Hi: 2
Hi: 3
Hi: 4
Hi: 5
Hi: 6
Hi: 7
Hi: 8
Hi: 9</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>In [6]</Prompt>
				<Statement> import time</Statement>
			</Code>
			<Code>
				<Prompt>In [7]</Prompt>
				<Statement> time.time()</Statement>
				<Result>Out[7]: 1531933100.30023</Result>
			</Code>
		</Codes>
		<Usage>
			<Command>help(object)</Command>
			<Description>display help about the given object.</Description>
		</Usage>
		<Usage>
			<Command>exit or ctrl-D</Command>
			<Description>Exits the REPL.</Description>
		</Usage>
		<Content># Welcome to OpenREPL!

print("Hello, World!")
		</Content>
		<Compiler>
COMPILER=python
FILE=test.py
debug=false
WORKDIR=$HOME
if [ "$CompilerOption" = "debug" ]; then
	debug=true;
	COMPILER="python -m pdb";
fi
printf "\n";
if [ "$IdeFileName" != "" ]; then
	WORKDIR=$(dirname "$IdeFileName");
	FILE=$(basename "$IdeFileName");
else
	echo $0|base64 --decode > "$WORKDIR/$FILE";
fi
if [ $? -eq 0 ] &amp;&amp; [ -f "$WORKDIR/$FILE" ]; then
    $COMPILER "$WORKDIR/$FILE" $@;
fi
printf "\n";
sleep 0.05
		</Compiler>
	</Demo>

	<Demo>
		<Name>ipython3</Name>
		<Doc>./docs/python.html</Doc>
		<Codes>
			<Code>
				<Prompt>In [1]</Prompt>
				<Statement> 12312321</Statement>
				<Result>Out[1]: 12312321</Result>
			</Code>
			<Code>
				<Prompt>In [2]</Prompt>
				<Statement> 12+31</Statement>
				<Result>Out[2]: 43</Result>
			</Code>
			<Code>
				<Prompt>In [3]</Prompt>
				<Statement> i=0</Statement>
			</Code>
			<Code>
				<Prompt>In [4]</Prompt>
				<Statement> i</Statement>
				<Result>Out[4]: 0</Result>
			</Code>
			<Code>
				<Prompt>In [5]</Prompt>
				<Statement> for i in range(10):
...        print("Hi: ",i)</Statement>
			<Result>Hi: 0
Hi: 1
Hi: 2
Hi: 3
Hi: 4
Hi: 5
Hi: 6
Hi: 7
Hi: 8
Hi: 9</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>In [6]</Prompt>
				<Statement> import time</Statement>
			</Code>
			<Code>
				<Prompt>In [7]</Prompt>
				<Statement> time.time()</Statement>
				<Result>Out[7]: 1531933100.30023</Result>
			</Code>
		</Codes>
		<Usage>
			<Command>help(object)</Command>
			<Description>display help about the given object.</Description>
		</Usage>
		<Usage>
			<Command>exit or ctrl-D</Command>
			<Description>Exits the REPL.</Description>
		</Usage>
		<Content># Welcome to OpenREPL!

print("Hello, World!")
		</Content>
		<Compiler>
COMPILER=python3
FILE=test.py
debug=false
WORKDIR=$HOME
if [ "$CompilerOption" = "debug" ]; then
	debug=true;
	COMPILER="python3 -m pdb";
fi
printf "\n";
if [ "$IdeFileName" != "" ]; then
	WORKDIR=$(dirname "$IdeFileName");
	FILE=$(basename "$IdeFileName");
else
	echo $0|base64 --decode > "$WORKDIR/$FILE";
fi
if [ $? -eq 0 ] &amp;&amp; [ -f "$WORKDIR/$FILE" ]; then
    $COMPILER "$WORKDIR/$FILE" $@;
fi
printf "\n";
sleep 0.05
		</Compiler>
	</Demo>

	<Demo>
		<Name>java</Name>
		<Github>https://github.com/javaterminal/tryjshell</Github>
		<Doc>./docs/java.html</Doc>
		<Codes>
			<Code>
				<Prompt>jshell&gt;</Prompt>
				<Statement> double[] arr = {19, 12.89, 16.5, 200, 13.7};</Statement>
				<Result>arr ==> double[5] { 19.0, 12.89, 16.5, 200.0, 13.7 }</Result>
			</Code>
			<Code>
				<Prompt>jshell&gt;</Prompt>
				<Statement> double total = 0;</Statement>
				<Result>total ==> 0.0</Result>
			</Code>
			<Code>
				<Prompt>jshell&gt;</Prompt>
				<Statement> for(int i=0; i&lt;arr.length; i++){
        	total = total + arr[i];
        }</Statement>
			</Code>
			<Code>
				<Prompt>jshell&gt;</Prompt>
				<Statement> total</Statement>
				<Result>total ==> 262.09</Result>
			</Code>
			<Code>
				<Prompt>jshell&gt;</Prompt>
				<Statement> System.out.format("The total is: %.3f", total);</Statement>
				<Result>The total is: 262.090 ==> java.io.PrintStream@6267c3bb</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>jshell&gt;</Prompt>
				<Statement> import java.util.Date;</Statement>
			</Code>
			<Code>
				<Prompt>jshell&gt;</Prompt>
				<Statement> Date date = new Date();</Statement>
				<Result>date ==> Sat Aug 10 08:58:58 GMT 2019</Result>
			</Code>
		</Codes>
		<Usage>
			<Command>/help</Command>
			<Description>shows this help.</Description>
		</Usage>
		<Usage>
			<Command>/reset</Command>
			<Description>reset the shell.</Description>
		</Usage>
		<Usage>
			<Command>/open</Command>
			<Description>open a source file.</Description>
		</Usage>
		<Usage>
			<Command>/save</Command>
			<Description>save snippet source to a file.</Description>
		</Usage>
		<Usage>
			<Command>/exit</Command>
			<Description>quit the REPL.</Description>
		</Usage>
		<Content>/* Welcome to OpenREPL! */
import java.util.*;

public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
		</Content>
		<Compiler>
COMPILER=javac
JAVA=java
FILE=HelloWorld.java
debug=false
WORKDIR=$HOME
runall=1
if [ "$CompilerOption" = "debug" ]; then
	echo "Debugging not Supported for Java.";
	exit;
fi
printf "\n";
if [ "$IdeFileName" != "" ]; then
	WORKDIR=$(dirname "$IdeFileName");
	FILE=$(basename "$IdeFileName");
	runall=0;
else
	echo $0|base64 --decode > "$WORKDIR/$FILE";
fi
CLASS_NAME="${FILE%.*}"
if [ $? -eq 0 ] &amp;&amp; [ -f "$WORKDIR/$FILE" ]; then
	if [ "$runall" -eq 1 ]; then
	    $JAVA "$WORKDIR"/*.java $@;
	else
		cd $WORKDIR;
	    $COMPILER $FILE $@;
    	$JAVA $CLASS_NAME $@;
	fi
fi
printf "\n";
sleep 0.05
		</Compiler>
	</Demo>

	<Demo>
		<Name>bash</Name>
		<Doc>http://linuxcommand.org/index.php</Doc>
		<Codes>
			<Code>
				<Prompt>bash$</Prompt>
				<Statement> NAME="John"</Statement>
			</Code>
			<Code>
				<Prompt>bash$</Prompt>
				<Statement> echo "Hello $NAME!"</Statement>
				<Result>Hello John</Result>
			</Code>
			<Code>
				<Prompt>bash$</Prompt>
				<Statement> get_name() {
  echo "John"
}</Statement>
			</Code>
			<Code>
				<Prompt>bash$</Prompt>
				<Statement> echo "You are $(get_name)"</Statement>
				<Result>You are John</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>bash$</Prompt>
				<Statement> for i in {1..5}; do
    echo "Welcome $i"
done</Statement>
				<Result>Welcome 1
Welcome 2
Welcome 3
Welcome 4
Welcome 5</Result>
			</Code>
		</Codes>
		<Usage>
			<Command>help</Command>
			<Description>shows brief description of bash commands.</Description>
		</Usage>
		<Usage>
			<Command>exit</Command>
			<Description>exits the bash.</Description>
		</Usage>
		<Content>#!/bin/bash
# Welcome to OpenREPL!

echo "Hello, World!"
		</Content>
		<Compiler>
COMPILER=bash
FILE=test.sh
debug=false
WORKDIR=$HOME
if [ "$CompilerOption" = "debug" ]; then
	debug=true;
	COMPILER="bash -x";
fi
printf "\n";
if [ "$IdeFileName" != "" ]; then
	WORKDIR=$(dirname "$IdeFileName");
	FILE=$(basename "$IdeFileName");
else
	echo $0|base64 --decode > "$WORKDIR/$FILE";
fi
if [ $? -eq 0 ] &amp;&amp; [ -f "$WORKDIR/$FILE" ]; then
    $COMPILER "$WORKDIR/$FILE" $@;
fi
printf "\n";
sleep 0.05
#hold the pty to write output, for short programs
		</Compiler>
	</Demo>

	<Demo>
		<Name>irb</Name>
		<Doc>https://www.ruby-lang.org/en/documentation/quickstart/</Doc>
		<Codes>
			<Code>
				<Prompt>irb(main):001:0&gt;</Prompt>
				<Statement> "Hello World"</Statement>
				<Result>=> "Hello World"</Result>
			</Code>
			<Code>
				<Prompt>irb(main):001:0&gt;</Prompt>
				<Statement> puts "Hello World"</Statement>
				<Result>Hello World &lt;br&gt;=> nil</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>irb(main):001:0&gt;</Prompt>
				<Statement> a = 3 ** 2</Statement>
				<Result>=> 9</Result>
			</Code>
			<Code>
				<Prompt>irb(main):001:0&gt;</Prompt>
				<Statement> b = 4 ** 2</Statement>
				<Result>=> 16</Result>
			</Code>
			<Code>
				<Prompt>irb(main):001:0&gt;</Prompt>
				<Statement> Math.sqrt(a+b)</Statement>
				<Result>=> 5.0</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>irb(main):001:0&gt;</Prompt>
				<Statement> for a in 1..5 do</Statement>
			</Code>
			<Code>
				<Prompt>irb(main):001:0*</Prompt>
				<Statement> puts "hello #{a}!"</Statement>
			</Code>
			<Code>
				<Prompt>irb(main):001:0&gt;</Prompt>
				<Statement> end</Statement>
				<Result>hello 1!
hello 2!
hello 3!
hello 4!
hello 5!
=> 1..5</Result>
			</Code>
		</Codes>

		<Usage>
			<Command>help</Command>
			<Description>shows help.</Description>
		</Usage>
		<Usage>
			<Command>exit</Command>
			<Description>quit the REPL.</Description>
		</Usage>
		<Content># Welcome to OpenREPL!

puts "Hello, World!"
		</Content>
		<Compiler>
COMPILER=ruby
FILE=test.rb
debug=false
WORKDIR=$HOME
if [ "$CompilerOption" = "debug" ]; then
	debug=true;
	COMPILER="ruby -r debug";
fi
printf "\n";
if [ "$IdeFileName" != "" ]; then
	WORKDIR=$(dirname "$IdeFileName");
	FILE=$(basename "$IdeFileName");
else
	echo $0|base64 --decode > "$WORKDIR/$FILE";
fi
if [ $? -eq 0 ] &amp;&amp; [ -f "$WORKDIR/$FILE" ]; then
    $COMPILER "$WORKDIR/$FILE" $@;
fi
printf "\n";
sleep 0.05
		</Compiler>
	</Demo>

	<Demo>
		<Name>javascript</Name>
		<Github>https://github.com/vickeykumar/jsconsole</Github>
		<Doc>https://developer.mozilla.org/bm/docs/Web/JavaScript</Doc>
		<Codes>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> var arr = [19, 12.89, 16.5, 200, 13.7];</Statement>
				<Result>&lt;* undefined</Result>
			</Code>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> arr</Statement>
				<Result>&lt;*Array (5)[ 19, 12.89, 16.5, 200, 13.7 ]  &lt;-- click on the result link to navigate array.</Result>
			</Code>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> var total = 0;</Statement>
				<Result>&lt;* undefined</Result>
			</Code>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> for(var i=0; i&lt;arr.length; i++){     // press shift+enter for multiline input 
        	total = total + arr[i];      // shift+enter for multiline input
        }</Statement>
        		<Result>&lt;* 262.09</Result>
			</Code>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> total</Statement>
				<Result>&lt;* 262.09</Result>
			</Code>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> alert("Total is : "+total);</Statement>
				<Result>**check windows alert box for message**</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> var date = new Date(Date.now());</Statement>
				<Result>&lt;* Date { … }</Result>
			</Code>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> date.toString();</Statement>
				<Result>&lt;* "Sun Aug 25 2019 15:28:50 GMT+0530 (India Standard Time)"</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> :help</Statement>
				<Result>:load &lt;script_url&gt; load also supports shortcuts, like `:load jquery`
:libraries
:clear
:history
:version
copy() and $_ for last value

Note: Click on object links to expand and search through it.
Press shift+enter for multiline statements.
</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> :libraries</Statement>
				<Result>jquery: https://code.jquery.com/jquery.min.js
underscore: https://cdn.jsdelivr.net/underscorejs/latest/underscore-min.js
lodash: https://cdn.jsdelivr.net/lodash/latest/lodash.min.js
moment: https://cdn.jsdelivr.net/momentjs/latest/moment.min.js
datefns: https://cdn.jsdelivr.net/gh/date-fns/date-fns/dist/date_fns.min.js</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> :load https://cdnjs.cloudflare.com/ajax/libs/mathjs/6.1.0/math.min.js</Statement>
				<Result>Loading script…
Loaded https://cdnjs.cloudflare.com/ajax/libs/mathjs/6.1.0/math.min.js</Result>
			</Code>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> math.round(math.e, 3);</Statement>
				<Result>&lt;* 2.718</Result>
			</Code>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> math.atan2(3, -3) / math.pi;</Statement>
				<Result>&lt;* 0.75</Result>
			</Code>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> math.log(10000, 10);</Statement>
				<Result>&lt;* 4</Result>
			</Code>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> math.pow([[-1, 2], [3, 1]], 2);</Statement>
				<Result>&lt;* Array(2)[
    0: Array(2)[
            0: 7
            1: 0
       ]
    1: Array(2)[
            0: 0
            1: 7
       ]
]</Result>
			</Code>
		</Codes>
		<Usage>
			<Command>:help</Command>
			<Description>shows this help.</Description>
		</Usage>
		<Usage>
			<Command>:load&lt;br&gt;</Command>
			<Description>loads the `script_url`; load also supports shortcuts, like `:load jquery`</Description>
		</Usage>
		<Usage>
			<Command>:libraries</Command>
			<Description>List loaded libraries.</Description>
		</Usage>
		<Usage>
			<Command>:clear</Command>
			<Description>clears the console.</Description>
		</Usage>
		<Usage>
			<Command>shift+enter</Command>
			<Description>multiline inputs for block, loops and functions.</Description>
		</Usage>
		<Content>/* Welcome to OpenREPL! */</Content>
	</Demo>

	<Demo>
		<Name>node</Name>
		<Github>https://github.com/nodejs/node</Github>
		<Doc>https://nodejs.org/dist/latest-v10.x/docs/api/repl.html</Doc>
		<Codes>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> .help</Statement>
				<Result>.break    Sometimes you get stuck, this gets you out
.clear    Alias for .break
.editor   Enter editor mode
.exit     Exit the repl
.help     Print this help message
.load     Load JS from a file into the REPL session
.save     Save all evaluated commands in this REPL session to a file
</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> var arr = [19, 12.89, 16.5, 200, 13.7];</Statement>
				<Result>undefined</Result>
			</Code>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> arr</Statement>
				<Result>[ 19, 12.89, 16.5, 200, 13.7 ]</Result>
			</Code>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> var total = 0;</Statement>
				<Result>undefined</Result>
			</Code>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> for(var i=0; i&lt;arr.length; i++) {
... total = total + arr[i];
}</Statement>
        		<Result>undefined</Result>
			</Code>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> total</Statement>
				<Result>262.09</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> var date = new Date(Date.now());</Statement>
				<Result>undefined</Result>
			</Code>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> date.toString();</Statement>
				<Result>'Tue Sep 03 2019 20:23:52 GMT+0530 (India Standard Time)'</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> .load add.js</Statement>
			</Code>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> add(1,3)</Statement>
				<Result>4</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> .editor
// Entering editor mode (^D to finish, ^C to cancel)
function welcome(name) {
  return `Hello ${name}!`;
}

welcome('Node.js User');

// ^D</Statement>
				<Result>'Hello Node.js User!'</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> a`Tab`</Statement>
				<Result>async        await

assert       async_hooks</Result>
			</Code>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> ht`Tab`</Statement>
				<Result>http   http2  https</Result>
			</Code>
		</Codes>
		<Usage>
			<Command>.help</Command>
			<Description>shows this help.</Description>
		</Usage>
		<Usage>
			<Command>.load</Command>
			<Description>Load JS from a file into the REPL session</Description>
		</Usage>
		<Usage>
			<Command>.break</Command>
			<Description>Sometimes you get stuck, this gets you out</Description>
		</Usage>
		<Usage>
			<Command>.clear</Command>
			<Description>Alias for .break</Description>
		</Usage>
		<Usage>
			<Command>.editor</Command>
			<Description>Enter editor mode</Description>
		</Usage>
		<Usage>
			<Command>.exit</Command>
			<Description>Exit the repl</Description>
		</Usage>
		<Usage>
			<Command>`Tab`</Command>
			<Description>Syntax Completion</Description>
		</Usage>
		<Content>/* Welcome to OpenREPL! */

console.log("Hello, World!");
		</Content>
		<Compiler>
COMPILER=node
FILE=test.js
debug=false
WORKDIR=$HOME
if [ "$CompilerOption" = "debug" ]; then
	debug=true;
	COMPILER="node inspect";
fi
printf "\n";
if [ "$IdeFileName" != "" ]; then
	WORKDIR=$(dirname "$IdeFileName");
	FILE=$(basename "$IdeFileName");
else
	echo $0|base64 --decode > "$WORKDIR/$FILE";
fi
if [ $? -eq 0 ] &amp;&amp; [ -f "$WORKDIR/$FILE" ]; then
    $COMPILER "$WORKDIR/$FILE" $@;
fi
printf "\n";
sleep 0.05
		</Compiler>
	</Demo>

	<Demo>
		<Name>perli</Name>
		<Github>https://github.com/mklement0/perli</Github>
		<Doc>https://www.guru99.com/perl-tutorials.html</Doc>
		<Codes>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> .help</Statement>
				<Result>REPL commands (start with '.'):
    .doc &lt;search-string&gt; or ? &lt;search-string&gt; or ... &lt;search-string&gt;? searches
      the Perl docs.
    .remi &lt;regex-op&gt; prints additional RegEx Matching Info; see above.
    .sh &lt;shell-cmd&gt; executes a shell command using system(), with arguments
      interpreted by the shell only; e.g.: .sh ls
    .clear / .cls clears the screen; note: may not work in Cygwin and MSYS.
    .exit / .quit exits the REPL (just 'exit' works too).
    .man opens perli's own man page.
    .home opens perli's homepage, https://github.com/mklement0/perli.
    .help or ? prints these instructions.
</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>perli&gt;</Prompt>
				<Statement> print "Hello, world!\n";</Statement>
				<Result>Hello, world!
1</Result>
			</Code>
			<Code>
				<Prompt>perli&gt;</Prompt>
				<Statement> $num = 7;</Statement>
				<Result>7</Result>
			</Code>
			<Code>
				<Prompt>perli&gt;</Prompt>
				<Statement> $txt = "it is $num";</Statement>
				<Result>'it is 7'</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>&gt;</Prompt>
				<Statement> @array=(1,2,3,4);</Statement>
				<Result>1
2
3
4</Result>
			</Code>
			<Code>
				<Prompt>perli&gt;</Prompt>
				<Statement> $total = 0;</Statement>
				<Result>0</Result>
			</Code>
			<Code>
				<Prompt>perli&gt;</Prompt>
				<Statement> foreach my $value (@array) { $total = $total + $value; }</Statement>
        		<Result>''</Result>
			</Code>
			<Code>
				<Prompt>perli&gt;</Prompt>
				<Statement> total</Statement>
				<Result>10</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>perli&gt;</Prompt>
				<Statement> $datestring = localtime();</Statement>
				<Result>'Thu Sep  5 22:11:45 2019'</Result>
			</Code>
			<Code>
				<Prompt>perli&gt;</Prompt>
				<Statement> $datestring = gmtime();</Statement>
				<Result>'Thu Sep  5 16:42:31 2019'</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>perli&gt;</Prompt>
				<Statement> .load add.js</Statement>
			</Code>
			<Code>
				<Prompt>perli&gt;</Prompt>
				<Statement> add(1,3)</Statement>
				<Result>4</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>perli&gt;</Prompt>
				<Statement> ?chomp</Statement>
				<Result>chomp VARIABLE
    chomp( LIST )
    chomp   This safer version of "chop" removes any trailing string that
            corresponds to the current value of $/ (also known as
            $INPUT_RECORD_SEPARATOR in the "English" module). It returns the
            total number of characters removed from all its arguments. It's
            often used to remove the newline from the end of an input record
            when you're worried that the final record may be missing its
            newline. When in paragraph mode ("$/ = ''"), it removes all
            trailing newlines from the string. When in slurp mode ("$/ =
            undef") or fixed-length record mode ($/ is a reference to an
            integer or the like; see perlvar), "chomp" won't remove
            anything. If VARIABLE is omitted, it chomps $_. Example:
            ...
            ...
</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>perli&gt;</Prompt>
				<Statement> cho`Tab`</Statement>
				<Result>chomp  chop   chown</Result>
			</Code>
			<Code>
				<Prompt>perli&gt;</Prompt>
				<Statement> get`Tab`</Statement>
				<Result>getc              getgrnam          gethostent        getnetbyname      getpgrp           getprotobyname    getpwent          getservbyname     getsockname
getgrent          gethostbyaddr     getlogin          getnetent         getppid           getprotobynumber  getpwnam          getservbyport     getsockopt
getgrgid          gethostbyname     getnetbyaddr      getpeername       getpriority       getprotoent       getpwuid          getservent </Result>
			</Code>
		</Codes>
		<Usage>
			<Command>.help</Command>
			<Description>shows this help.</Description>
		</Usage>
		<Usage>
			<Command>.doc ... or ? ...</Command>
			<Description>searches the Perl docs.</Description>
		</Usage>
		<Usage>
			<Command>.remi ...</Command>
			<Description>prints additional RegEx Matching Info.</Description>
		</Usage>
		<Usage>
			<Command>.clear</Command>
			<Description>clears the screen.</Description>
		</Usage>
		<Usage>
			<Command>.exit</Command>
			<Description>Exits the repl</Description>
		</Usage>
		<Usage>
			<Command>`Tab`</Command>
			<Description>Syntax Completion</Description>
		</Usage>
		<Content>#!/usr/bin/perl
# Welcome to OpenREPL!

print "Hello, World!\n";
		</Content>
		<Compiler>
COMPILER=perl
FILE=test.pl
debug=false
WORKDIR=$HOME
if [ "$CompilerOption" = "debug" ]; then
	debug=true;
	COMPILER="perl -d";
fi
printf "\n";
if [ "$IdeFileName" != "" ]; then
	WORKDIR=$(dirname "$IdeFileName");
	FILE=$(basename "$IdeFileName");
else
	echo $0|base64 --decode > "$WORKDIR/$FILE";
fi
if [ $? -eq 0 ] &amp;&amp; [ -f "$WORKDIR/$FILE" ]; then
    $COMPILER "$WORKDIR/$FILE" $@;
fi
printf "\n";
sleep 0.05
		</Compiler>
	</Demo>

	<Demo>
		<Name>tclsh</Name>
		<Doc>https://www.tcl.tk/man/tcl8.5/tutorial/tcltutorial.html</Doc>
		<Codes>
			<Code>
				<Prompt>%</Prompt>
				<Statement> puts "Hello, World!!"</Statement>
				<Result>Hello, World!!</Result>
			</Code>
			<Code>
				<Prompt>%</Prompt>
				<Statement> set x 1</Statement>
				<Result>1</Result>
			</Code>
			<Code>
				<Prompt>%</Prompt>
				<Statement> while {$x &lt; 5} {
    puts "Hello $x"
    set x [expr {$x + 1}]
}</Statement>
				<Result>Hello 1
Hello 2
Hello 3
Hello 4</Result>
			</Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>%</Prompt>
				<Statement> for {set i 0} {$i &lt; 10} {incr i} {
    puts "loop: $i"
}</Statement>
				<Result>loop: 0
loop: 1
loop: 2
loop: 3
loop: 4
loop: 5
loop: 6
loop: 7
loop: 8
loop: 9</Result>
			</Code>
		</Codes>
		<Usage>
			<Command>info commands</Command>
			<Description>shows lists of all available tcl commands.</Description>
		</Usage>
		<Usage>
			<Command>exit</Command>
			<Description>exits the tclsh.</Description>
		</Usage>
		<Content>#!/usr/bin/tclsh
# Welcome to OpenREPL!

puts "Hello, World!"
		</Content>
		<Compiler>
COMPILER=tclsh
FILE=test.tcl
debug=false
WORKDIR=$HOME
printf "\n";
if [ "$IdeFileName" != "" ]; then
	WORKDIR=$(dirname "$IdeFileName");
	FILE=$(basename "$IdeFileName");
else
	echo $0|base64 --decode > "$WORKDIR/$FILE";
fi
if [ $? -eq 0 ] &amp;&amp; [ -f "$WORKDIR/$FILE" ]; then
    $COMPILER "$WORKDIR/$FILE" $@;
fi
printf "\n";
sleep 0.05
		</Compiler>
	</Demo>

	<!-- rust demo -->
	<Demo>
		<Name>evcxr</Name>
		<Github>https://github.com/evcxr/evcxr</Github>
		<Doc>https://doc.rust-lang.org/book/title-page.html</Doc>
		<Codes>
		    <Code>
		        <Prompt>&gt;&gt;</Prompt>
		        <Statement>println!("Hello, World!!");</Statement>
		        <Result>Hello, World!!</Result>
		    </Code>
		    <Code>
		        <Prompt>&gt;&gt;</Prompt>
		        <Statement>let x = 1;</Statement>
		        <Result>1</Result>
		    </Code>
		</Codes>
		<Codes>
		    <Code>
		        <Prompt>&gt;&gt;</Prompt>
		        <Statement>let mut x = 1;
while x &lt; 5 {
    println!("Hello {}", x);
    x += 1;
}</Statement>
		        <Result>Hello 1
Hello 2
Hello 3
Hello 4</Result>
		    </Code>
		</Codes>
		<Codes>
		    <Code>
		        <Prompt>&gt;&gt;</Prompt>
		        <Statement>for i in 0..10 {
    println!("loop: {}", i);
}</Statement>
		        <Result>loop: 0
loop: 1
loop: 2
loop: 3
loop: 4
loop: 5
loop: 6
loop: 7
loop: 8
loop: 9</Result>
		    </Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>&gt;&gt;</Prompt>
				<Statement> :help</Statement>
				<Result>:allow_static_linking Set whether to allow static linking of dependencies (0/1)
:build_env        Set environment variables when building code (key=value)
:cache            Set cache size in MiB, or 0 to disable.
:clear            Clear all state, keeping compilation cache
...
:doc              show the documentation of a variable, keyword, type or module
:env              Set an environment variable (key=value)
:explain          Print explanation of last error
:help             Print command help
...
</Result>
			</Code>
		</Codes>
		<Usage>
			<Command>:help</Command>
			<Description>Print command help</Description>
		</Usage>
		<Usage>
			<Command>:quit</Command>
			<Description>Quit evaluation and exit</Description>
		</Usage>
		<Content>/* Welcome to OpenREPL! */
fn main() {
    println!("Hello, World!");

    let a = 5;
    let b = 10;

    let result = sum(a, b);

    println!("The sum of {} and {} is {}", a, b, result);
}

fn sum(x: i32, y: i32) -> i32 {
    x + y
}
		</Content>
		<Compiler>
COMPILER=rustc
FILE=test.rs
debug=false
WORKDIR=$HOME
if [ "$CompilerOption" = "debug" ]; then
	debug=true;
fi
if [ "$IdeLang" = "rust" ] || [ "$IdeLang" = "evcxr" ]; then
	COMPILER=rustc
fi
printf "\n";

if [ "$IdeFileName" != "" ]; then
	WORKDIR=$(dirname "$IdeFileName");
	FILE=$(basename "$IdeFileName");
else
	echo $0|base64 --decode > "$WORKDIR/$FILE";
fi

cd $WORKDIR;
if [ $? -eq 0 ] &amp;&amp; [ -f "$WORKDIR/$FILE" ]; then
	if $debug; then
		$COMPILER -g -o "$FILE".o $FILE $@;
		rust-gdb "$FILE".o $@;
	else
    	$COMPILER $FILE -o "$FILE".o;
        "$WORKDIR/$FILE".o $@;
    fi
fi
printf "\n";
sleep 0.05
		</Compiler>
	</Demo>

	<!-- SQL demo -->
	<Demo>
		<Name>sqlite3</Name>
		<Github>https://github.com/sqlite/sqlite</Github>
		<Doc>https://sqlite.org/cli.html</Doc>
		<Codes>
		    <Code>
		        <Prompt>sqlite&gt;</Prompt>
		        <Statement>create table tbl1(one text, two int);</Statement>
		    </Code>
		    <Code>
		        <Prompt>sqlite&gt;</Prompt>
		        <Statement>insert into tbl1 values('hello!',10);</Statement>
		    </Code>
		    <Code>
		        <Prompt>sqlite&gt;</Prompt>
		        <Statement>insert into tbl1 values('goodbye', 20);</Statement>
		    </Code>
		    <Code>
		        <Prompt>sqlite&gt;</Prompt>
		        <Statement>select * from tbl1;</Statement>
		        <Result>hello!|10
goodbye|20</Result>
		    </Code>
		</Codes>
		<Codes>
		    <Code>
		        <Prompt>sqlite&gt;</Prompt>
		        <Statement>.open ex1.db</Statement>
		    </Code>
		    <Code>
		        <Prompt>sqlite&gt;</Prompt>
		        <Statement>.save ex1.db</Statement>
		    </Code>
		</Codes>
		<Codes>
			<Code>
				<Prompt>sqlite&gt;</Prompt>
				<Statement>.help</Statement>
				<Result>.archive ...             Manage SQL archives
.auth ON|OFF             Show authorizer callbacks
.backup ?DB? FILE        Backup DB (default "main") to FILE
.bail on|off             Stop after hitting an error.  Default OFF
.cd DIRECTORY            Change the working directory to DIRECTORY
...
.dump ?OBJECTS?          Render database content as SQL
.echo on|off             Turn command echo on or off
.eqp on|off|full|...     Enable or disable automatic EXPLAIN QUERY PLAN
.excel                   Display the output of next command in spreadsheet
...
</Result>
			</Code>
		</Codes>
		<Usage>
			<Command>.help</Command>
			<Description>Print command help</Description>
		</Usage>
		<Usage>
			<Command>.quit</Command>
			<Description>Quit evaluation and exit</Description>
		</Usage>
		<Content>-- Welcome to OpenREPL!
-- Create the Resources table
CREATE TABLE IF NOT EXISTS Resources (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    language TEXT,
    title TEXT,
    documentation TEXT,
    github TEXT
);

-- Insert the data
INSERT INTO Resources (language, title, documentation, github) VALUES
('C++', 'Cling Documentation', './docs/cling.html', 'https://github.com/root-project/cling'),
('Go', 'Yaegi Documentation', 'https://pkg.go.dev/github.com/traefik/yaegi', 'https://github.com/traefik/yaegi'),
('Go', 'Go Interpreter Documentation', './docs/gointerpreter.html', 'https://github.com/vickeykumar/Go-interpreter'),
('jq', 'jq Manual', 'https://stedolan.github.io/jq/manual', 'https://github.com/vickeykumar/jq-repl'),
('Python', 'Python Documentation', './docs/python.html', ''),
('Java', 'Java Documentation', './docs/java.html', 'https://github.com/javaterminal/tryjshell'),
('Bash', 'Linux Command', 'http://linuxcommand.org/index.php', ''),
('Ruby', 'Ruby Quickstart', 'https://www.ruby-lang.org/en/documentation/quickstart/', ''),
('JavaScript', 'JavaScript Documentation', 'https://developer.mozilla.org/bm/docs/Web/JavaScript', 'https://github.com/vickeykumar/jsconsole'),
('Node.js', 'Node.js REPL Documentation', 'https://nodejs.org/dist/latest-v10.x/docs/api/repl.html', 'https://github.com/nodejs/node'),
('Perl', 'Perl Tutorials', 'https://www.guru99.com/perl-tutorials.html', 'https://github.com/mklement0/perli'),
('Tcl', 'Tcl Tutorial', 'https://www.tcl.tk/man/tcl8.5/tutorial/tcltutorial.html', ''),
('Rust', 'Rust Book', 'https://doc.rust-lang.org/book/title-page.html', 'https://github.com/evcxr/evcxr'),
('SQLite', 'SQLite Doc', 'https://sqlite.org/cli.html', 'https://github.com/sqlite/sqlite');

-- List all records
SELECT * FROM Resources;
		</Content>
		<Compiler>
COMPILER=sqlite3
FILE=test.sql
debug=false
WORKDIR=$HOME
if [ "$CompilerOption" = "debug" ]; then
    debug=true;
fi

if [ "$IdeFileName" != "" ]; then
    WORKDIR=$(dirname "$IdeFileName");
    FILE=$(basename "$IdeFileName");
else
    echo $0|base64 --decode > "$WORKDIR/$FILE";
fi

cd $WORKDIR;
if [ $? -eq 0 ] &amp;&amp; [ -f "$WORKDIR/$FILE" ]; then
    if $debug; then
        $COMPILER $@&lt;&lt;EOF
.eqp full
.echo on
.timer on
.read $FILE
EOF
    else
        $COMPILER $@ -init $FILE
    fi
fi
printf "\n";
sleep 0.05
		</Compiler>
	</Demo>

    <!-- typescript demo -->
    <Demo>
        <Name>ts-node</Name>
        <Github>https://github.com/TypeStrong/ts-node</Github>
        <Doc>https://typestrong.org/ts-node/</Doc>
        <Codes>
            <Code>
                <Prompt>&gt;</Prompt>
                <Statement>.help</Statement>
                <Result>.break    Sometimes you get stuck, this gets you out
.clear    Alias for .break
.editor   Enter editor mode
.exit     Exit the REPL
.help     Print this help message
.load     Load JS from a file into the REPL session
.save     Save all evaluated commands in this REPL session to a file
.type     Check the type of a TypeScript identifier</Result>
            </Code>
        </Codes>
        <Codes>
            <Code>
                <Prompt>&gt;</Prompt>
                <Statement>console.log("Hello, world!");</Statement>
                <Result>Hello, world!</Result>
            </Code>
            <Code>
                <Prompt>&gt;</Prompt>
                <Statement>const x = 10;</Statement>
                <Result>undefined</Result>
            </Code>
            <Code>
                <Prompt>&gt;</Prompt>
                <Statement>const y = 'foo';</Statement>
                <Result>undefined</Result>
            </Code>
            <Code>
                <Prompt>&gt;</Prompt>
                <Statement>y</Statement>
                <Result>'foo'</Result>
            </Code>
        </Codes>
        <Codes>
            <Code>
                <Prompt>&gt;</Prompt>
                <Statement>function add(x:any, y:any) { return x+y; }</Statement>
                <Result>undefined</Result>
            </Code>
            <Code>
                <Prompt>&gt;</Prompt>
                <Statement>add(1, 2);</Statement>
                <Result>3</Result>
            </Code>
            <Code>
                <Prompt>&gt;</Prompt>
                <Statement>add('hello ', 'world!');</Statement>
                <Result>hello world!</Result>
            </Code>
        </Codes>
        <Usage>
            <Command>.help</Command>
            <Description>Print command help</Description>
        </Usage>
        <Usage>
            <Command>.quit</Command>
            <Description>Quit evaluation and exit</Description>
        </Usage>
        <Content>/* Welcome to OpenREPL! */

function greet() {
    console.log("Hello, World!");
}

greet();
</Content>
        <Compiler>
COMPILER=ts-node
FILE=test.ts
debug=false
WORKDIR=$HOME
if [ "$CompilerOption" = "debug" ]; then
    debug=true;
fi

if [ "$IdeFileName" != "" ]; then
    WORKDIR=$(dirname "$IdeFileName");
    FILE=$(basename "$IdeFileName");
else
    echo $0|base64 --decode > "$WORKDIR/$FILE";
fi

cd $WORKDIR;
if [ $? -eq 0 ] &amp;&amp; [ -f "$WORKDIR/$FILE" ]; then
    if $debug; then
        TS_NODE_DEBUG=true $COMPILER $FILE $@
    else
        $COMPILER $FILE $@
    fi
fi
printf "\n";
sleep 0.05
        </Compiler>
    </Demo>
</DemoList>
